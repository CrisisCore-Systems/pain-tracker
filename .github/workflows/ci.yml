name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

# Allow workflow to run on forks with read permissions
permissions:
  contents: read
  pull-requests: read
  checks: write
  actions: read

# Cancel previous runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Build environment
  NODE_ENV: production
  VITE_APP_ENVIRONMENT: production
  VITE_WCB_API_ENDPOINT: /api/wcb

  # Standardized Node version for CI
  NODE_VERSION: '20'

jobs:
  # Changed files detection for optimization
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      code-changed: ${{ steps.changes.outputs.code }}
      docs-changed: ${{ steps.changes.outputs.docs }}
      deps-changed: ${{ steps.changes.outputs.deps }}
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
        with:
          fetch-depth: 0
      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36
        id: changes
        with:
          filters: |
            code:
              - 'src/**'
              - 'scripts/**'
              - '*.ts'
              - '*.js'
              - '*.tsx'
              - '*.jsx'
            docs:
              - '**/*.md'
              - 'docs/**'
            deps:
              - 'package.json'
              - 'package-lock.json'

  # Test matrix across multiple Node.js versions
  test-matrix:
    name: Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || needs.detect-changes.outputs.code-changed == 'true' || needs.detect-changes.outputs.deps-changed == 'true'
    needs: [detect-changes]
    strategy:
      fail-fast: false
      matrix:
        # Standardize on a single, supported LTS for CI to avoid mismatched toolchains
        node-version: [20]
        include:
          - node-version: 20
            is-primary: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Run environment diagnostics
        run: node scripts/doctor.js
        
      - name: Run TypeScript type checking
        run: npm run typecheck
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Run security checks
        run: |
          node scripts/scan-secrets.js
          node scripts/check-collapse-vectors.js
          node scripts/check-merge-markers.js
      
      - name: Run tests
        run: npm run test
      
      - name: Run test coverage (primary version only)
        if: matrix.is-primary
        run: npm run test:coverage
      
      - name: Upload coverage to Codecov (primary version only)
        if: matrix.is-primary
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7
        with:
          fail_ci_if_error: false
          verbose: true
      
      - name: Build application
        run: npm run build
      
      - name: Upload build artifacts (primary version only)
        if: matrix.is-primary
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # Comprehensive security scanning
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: github.event_name != 'pull_request' || needs.detect-changes.outputs.code-changed == 'true'
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Setup Node.js
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Run dependency audit
        run: |
          echo "üîç Running comprehensive dependency audit..."
          npm audit --audit-level moderate --json > audit-results.json || true
          
          # Check for high/critical vulnerabilities
          if npm audit --audit-level high; then
            echo "‚úÖ No high/critical vulnerabilities found"
          else
            echo "‚ùå High/critical vulnerabilities detected!"
            npm audit --audit-level high
            exit 1
          fi
      
      - name: Enhanced secret scanning
        run: node scripts/scan-secrets.js
      
      - name: CrisisCore security validation
        run: node scripts/check-collapse-vectors.js
      
      - name: Static security analysis
        run: |
          echo "üîç Running enhanced static security analysis..."
          
          # Extended dangerous patterns
          echo "Checking for eval() usage..."
          if grep -r "eval(" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx"; then
            echo "‚ùå Found eval() usage - potential security risk!"
            exit 1
          fi
          
          echo "Checking for innerHTML usage..."
          if grep -r "innerHTML\s*=" src/ --include="*.ts" --include="*.tsx"; then
            echo "‚ö†Ô∏è Found innerHTML usage - review for XSS safety"
          fi
          
          echo "Checking for document.write usage..."
          if grep -r "document\.write" src/ --include="*.ts" --include="*.tsx"; then
            echo "‚ùå Found document.write usage - potential XSS vector!"
            exit 1
          fi
          
          echo "Checking for dangerous Function constructor..."
          if grep -r "new Function\s*(" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx"; then
            echo "‚ùå Found Function constructor usage - potential code injection!"
            exit 1
          fi
          
          echo "‚úÖ Static security analysis passed"
      
      - name: CodeQL Analysis
        uses: github/codeql-action/init@3599b3baa15b485a2e49ef411a7a4bb2452e7f93
        with:
          languages: javascript-typescript
          queries: security-extended,security-and-quality
      - name: Autobuild
        uses: github/codeql-action/autobuild@3599b3baa15b485a2e49ef411a7a4bb2452e7f93
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@3599b3baa15b485a2e49ef411a7a4bb2452e7f93
        with:
          category: "/language:javascript-typescript"
      
      - name: Upload security results
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: security-scan-results
          path: |
            audit-results.json
            sarif-results/
          retention-days: 30

  # Documentation checks
  docs-check:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || needs.detect-changes.outputs.docs-changed == 'true'
    needs: [detect-changes]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      
      - name: Check README exists and is valid
        run: |
          if [ ! -f README.md ]; then
            echo "‚ùå README.md not found"
            exit 1
          fi
          
          # Basic README validation
          if ! grep -q "# " README.md; then
            echo "‚ùå README.md missing main heading"
            exit 1
          fi
          
          echo "‚úÖ README.md validation passed"
      
      - name: Check for broken links (if markdown-link-check is available)
        run: |
          if command -v markdown-link-check >/dev/null 2>&1; then
            markdown-link-check README.md
          else
            echo "‚ÑπÔ∏è markdown-link-check not available, skipping link checks"
          fi

  # Deployment preparation
  build-deploy:
    name: Build for Deployment
    runs-on: ubuntu-latest
    needs: [test-matrix, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Setup Node.js
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Build for production
        run: npm run build
        env:
          NODE_ENV: production
          VITE_APP_ENVIRONMENT: production
          VITE_WCB_API_ENDPOINT: /api/wcb
      
      - name: Verify build output
        run: |
          echo "üîç Verifying build output..."
          
          # Check for essential files
          if [ ! -f "dist/index.html" ]; then
            echo "‚ùå index.html not found in build output!"
            exit 1
          fi
          
          # Check for potential sensitive data in build
          if grep -r "api[_-]key\|secret\|password" dist/ --exclude="*.map" | grep -v "console\|error\|log\|placeholder"; then
            echo "‚ùå Potential sensitive data found in build output!"
            exit 1
          fi
          
          # Verify production environment
          if grep -r "VITE_APP_ENVIRONMENT.*development" dist/; then
            echo "‚ùå Development environment detected in production build!"
            exit 1
          fi
          
          echo "‚úÖ Build verification passed"
      
      - name: Upload production build
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: production-build
          path: dist/
          retention-days: 30

  # Summary job for status checks
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    if: always()
    needs: [test-matrix, security-scan, docs-check]
    
    steps:
      - name: Check CI Status
        run: |
          if [ "${{ needs.test-matrix.result }}" == "failure" ] || [ "${{ needs.security-scan.result }}" == "failure" ]; then
            echo "‚ùå CI Pipeline failed"
            exit 1
          elif [ "${{ needs.test-matrix.result }}" == "skipped" ] && [ "${{ needs.security-scan.result }}" == "skipped" ]; then
            echo "‚è≠Ô∏è CI Pipeline skipped (no relevant changes)"
          else
            echo "‚úÖ CI Pipeline passed"
          fi