name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

permissions:
  contents: read
  security-events: write

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Run npm audit
        run: |
          echo "🔍 Running comprehensive dependency audit..."
          npm audit --audit-level moderate --json > audit-results.json || true
          
          # Check for high/critical vulnerabilities
          if npm audit --audit-level high; then
            echo "✅ No high/critical vulnerabilities found"
          else
            echo "❌ High/critical vulnerabilities detected!"
            npm audit --audit-level high
            exit 1
          fi
      
      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-audit-results
          path: audit-results.json
          retention-days: 30

  code-security-scan:
    name: Static Code Security Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Run security linting
        run: |
          echo "🔍 Running security-focused static analysis..."
          
          # Check for dangerous patterns
          echo "Checking for eval() usage..."
          if grep -r "eval(" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx"; then
            echo "❌ Found eval() usage - potential security risk!"
            exit 1
          fi
          
          echo "Checking for innerHTML usage..."
          if grep -r "innerHTML\s*=" src/ --include="*.ts" --include="*.tsx"; then
            echo "⚠️ Found innerHTML usage - review for XSS safety"
          fi
          
          echo "Checking for document.write usage..."
          if grep -r "document\.write" src/ --include="*.ts" --include="*.tsx"; then
            echo "❌ Found document.write usage - potential XSS vector!"
            exit 1
          fi
          
          echo "✅ Static security analysis passed"
      
      - name: Check for hardcoded secrets
        run: |
          echo "🔐 Comprehensive secret scanning..."
          
          # Extended patterns for secret detection
          patterns=(
            "(api[_-]?key|secret|password|token).*=.*['\"][^'\"]{8,}"
            "https://.*@.*\.ingest\..*\.sentry\.io"
            "sk-[a-zA-Z0-9]{32,}"
            "pk_[a-z]+_[a-zA-Z0-9]+"
            "AIza[0-9A-Za-z-_]{35}"
            "ya29\.[0-9A-Za-z\-_]+"
          )
          
          found_secrets=false
          for pattern in "${patterns[@]}"; do
            if grep -rE --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" "$pattern" src/; then
              echo "❌ Potential secret found matching pattern: $pattern"
              found_secrets=true
            fi
          done
          
          if [ "$found_secrets" = true ]; then
            echo "❌ Hardcoded secrets detected!"
            exit 1
          fi
          
          echo "✅ No hardcoded secrets found"
      
      - name: Run CrisisCore security checks
        run: |
          echo "🛡️ Running CrisisCore-specific security validation..."
          node scripts/check-collapse-vectors.js
          echo "✅ CrisisCore security checks passed"

  build-security-verification:
    name: Build Output Security Verification
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          VITE_APP_ENVIRONMENT: production
          VITE_WCB_API_ENDPOINT: /api/wcb
          VITE_SENTRY_DSN: ""
      
      - name: Scan build output for sensitive data
        run: |
          echo "🔍 Scanning build output for sensitive information..."
          
          # Check for potential secrets in build output
          if grep -r "api[_-]key\|secret\|password" dist/ --exclude="*.map" | grep -v "console\|error\|log\|placeholder"; then
            echo "❌ Potential sensitive data found in build output!"
            exit 1
          fi
          
          # Check for development artifacts
          if grep -r "VITE_APP_ENVIRONMENT.*development" dist/; then
            echo "❌ Development environment detected in production build!"
            exit 1
          fi
          
          # Verify source maps are generated (for debugging but not secrets)
          if [ ! -f "dist/assets/*.js.map" ]; then
            echo "⚠️ Source maps not found - debugging may be difficult"
          fi
          
          echo "✅ Build output security scan passed"
      
      - name: Generate security report
        run: |
          echo "📋 Security Scan Summary" > security-report.md
          echo "========================" >> security-report.md
          echo "" >> security-report.md
          echo "- ✅ Dependency vulnerabilities: None found above moderate level" >> security-report.md
          echo "- ✅ Static code analysis: No security anti-patterns detected" >> security-report.md
          echo "- ✅ Secret scanning: No hardcoded secrets found" >> security-report.md
          echo "- ✅ Build output verification: Clean production build" >> security-report.md
          echo "- ✅ CrisisCore checks: All security gates passed" >> security-report.md
          echo "" >> security-report.md
          echo "Scan completed at: $(date -u)" >> security-report.md
          
          cat security-report.md
      
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-report
          path: security-report.md
          retention-days: 90