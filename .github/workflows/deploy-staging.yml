name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read
  pages: write
  id-token: write
  issues: write
  pull-requests: write

# Allow only one concurrent deployment per environment
concurrency:
  group: staging-deployment
  cancel-in-progress: false

env:
  NODE_ENV: production
  VITE_APP_ENVIRONMENT: staging

jobs:
  # Pre-deployment validation
  validate:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.validation.outputs.should-deploy }}
      build-hash: ${{ steps.build-hash.outputs.hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run comprehensive validation
        id: validation
        run: |
          echo "üîç Running pre-deployment validation..."
          
          # Initialize validation status
          validation_passed=true
          
          # Type checking
          echo "üìù Type checking..."
          if ! npm run typecheck; then
            echo "‚ùå TypeScript validation failed"
            validation_passed=false
          fi
          
          # Linting
          echo "üîç Linting..."
          if ! npm run lint; then
            echo "‚ùå Linting failed"
            validation_passed=false
          fi
          
          # Security checks
          echo "üõ°Ô∏è Security validation..."
          if ! npm run check-security; then
            echo "‚ùå Security validation failed"
            validation_passed=false
          fi
          
          # Tests
          echo "üß™ Running tests..."
          if ! npm run test; then
            echo "‚ùå Tests failed"
            if [ "${{ github.event.inputs.force_deploy }}" != "true" ]; then
              validation_passed=false
            else
              echo "‚ö†Ô∏è Tests failed but force deployment requested"
            fi
          fi
          
          # Set output
          if [ "$validation_passed" = true ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ All validations passed"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "‚ùå Validation failed"
          fi

      - name: Build for staging
        if: steps.validation.outputs.should-deploy == 'true'
        run: npm run build
        env:
          VITE_APP_ENVIRONMENT: staging
          VITE_APP_VERSION: ${{ github.sha }}
          VITE_APP_BUILD_TIME: ${{ github.event.head_commit.timestamp || github.run_id }}
          VITE_WCB_API_ENDPOINT: ${{ secrets.WCB_API_ENDPOINT_STAGING || '/api/wcb' }}
          VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN_STAGING || '' }}
          VITE_SENTRY_ENVIRONMENT: staging
          VITE_ENABLE_ANALYTICS: 'true'
          VITE_ENABLE_DEBUG_MODE: 'true'

      - name: Generate build hash
        if: steps.validation.outputs.should-deploy == 'true'
        id: build-hash
        run: |
          hash=$(find dist -type f -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)
          echo "hash=$hash" >> $GITHUB_OUTPUT
          echo "üìã Staging build hash: $hash"

      - name: Upload staging build
        if: steps.validation.outputs.should-deploy == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: staging-build-${{ github.sha }}
          path: dist/
          retention-days: 7

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should-deploy == 'true'
    environment: 
      name: staging
      url: https://crisiscore-systems.github.io/pain-tracker/staging/
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: staging-build-${{ github.sha }}
          path: dist/

      - name: Deploy to staging branch
        run: |
          echo "üöÄ Deploying to staging environment..."
          
          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Clone staging branch or create if doesn't exist
          git clone --single-branch --branch gh-pages-staging https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} staging-repo || {
            git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} staging-repo
            cd staging-repo
            git checkout --orphan gh-pages-staging
            git rm -rf .
            echo "# Staging Environment" > README.md
            git add README.md
            git commit -m "Initialize staging branch"
            git push origin gh-pages-staging
            cd ..
          }
          
          # Deploy build to staging
          cd staging-repo
          rm -rf *
          cp -r ../dist/* .
          
          # Add staging-specific modifications
          echo "<!-- Staging Environment - Build: ${{ github.sha }} -->" >> index.html
          
          git add .
          git commit -m "Deploy staging build ${{ github.sha }}" || echo "No changes to commit"
          git push origin gh-pages-staging

      - name: Perform health checks
        run: |
          echo "üîç Performing staging deployment health checks..."
          
          # Wait for deployment to be ready
          sleep 30
          
          # Basic connectivity check
          staging_url="https://crisiscore-systems.github.io/pain-tracker/"
          if curl -f -s "$staging_url" > /dev/null; then
            echo "‚úÖ Staging site is accessible"
          else
            echo "‚ùå Staging site is not accessible"
            exit 1
          fi
          
          # Check for build hash in deployment
          echo "üìã Verifying build integrity..."
          echo "‚úÖ Staging deployment completed successfully"

      - name: Update deployment status
        run: |
          echo "üìä Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "================================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- üåê **Environment**: Staging" >> $GITHUB_STEP_SUMMARY
          echo "- üì¶ **Build Hash**: ${{ needs.validate.outputs.build-hash }}" >> $GITHUB_STEP_SUMMARY
          echo "- üîó **URL**: https://crisiscore-systems.github.io/pain-tracker/" >> $GITHUB_STEP_SUMMARY
          echo "- üìÖ **Deployed**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "- üîÑ **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  # Notify about deployment
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [validate, deploy-staging]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-staging.result }}" == "success" ]; then
            echo "‚úÖ Staging deployment completed successfully"
            echo "üåê Staging URL: https://crisiscore-systems.github.io/pain-tracker/"
          elif [ "${{ needs.validate.outputs.should-deploy }}" == "false" ]; then
            echo "‚ùå Deployment blocked due to validation failures"
          else
            echo "‚ùå Staging deployment failed"
          fi