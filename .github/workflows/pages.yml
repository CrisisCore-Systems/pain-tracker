name: Deploy (Pages)
on:
  push: { branches: [ main ] }
  pull_request: { branches: [ main ] }
permissions: { contents: write, pages: write, id-token: write }

# Cancel in-progress workflow runs for the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - run: npm ci --legacy-peer-deps
      - name: Security audit
        run: |
          echo "🔍 Running security audit..."
          npm audit --audit-level moderate || {
            echo "❌ Security vulnerabilities found!"
            echo "💡 Run 'npm audit fix' to resolve issues"
            exit 1
          }
      - name: Check for hardcoded secrets
        run: |
          echo "🔐 Scanning for hardcoded secrets..."
          if grep -r --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
            -E "(api[_-]?key|secret|password|token).*=.*['\"][^'\"]{8,}" src/ ; then
            echo "❌ Potential hardcoded secrets detected!"
            exit 1
          fi
          if grep -r --include="*.ts" --include="*.tsx" \
            "https://.*@.*\.ingest\..*\.sentry\.io" src/ ; then
            echo "❌ Hardcoded Sentry DSN detected!"
            exit 1
          fi
          echo "✅ No hardcoded secrets found"

  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - run: npm ci --legacy-peer-deps
      - name: Type checking
        run: |
          echo "📝 Running TypeScript type checking..."
          npm run typecheck
      - name: Linting
        run: |
          echo "🔍 Running ESLint..."
          npm run lint
      - name: Run tests with coverage
        run: |
          echo "🧪 Running tests with coverage..."
          npm run test:coverage
      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  build:
    runs-on: ubuntu-latest
    needs: [security-audit, code-quality]
    outputs:
      build-hash: ${{ steps.build-hash.outputs.hash }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - run: npm ci --legacy-peer-deps
      - name: Build
        run: npm run build
        env:
          NODE_ENV: production
          VITE_APP_TITLE: Pain Tracker
          VITE_APP_ENVIRONMENT: production
          VITE_APP_VERSION: ${{ github.sha }}
          VITE_APP_BUILD_TIME: ${{ github.event.head_commit.timestamp }}
          VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN || '' }}
          VITE_SENTRY_ENVIRONMENT: production
          VITE_SENTRY_RELEASE: ${{ github.sha }}
          VITE_WCB_API_ENDPOINT: ${{ secrets.WCB_API_ENDPOINT || '/api/wcb' }}
          VITE_ENABLE_ANALYTICS: 'true'
          VITE_ENABLE_WCB_SUBMISSION: 'true'
          VITE_ENABLE_EXPORT_FEATURES: 'true'
      - name: Verify build output
        run: |
          if [ ! -d "dist" ]; then
            echo "❌ Build failed: dist directory not found"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "❌ Build failed: index.html not found in dist"
            exit 1
          fi
          echo "✅ Build verification passed"
      - name: Generate build integrity hash
        id: build-hash
        run: |
          hash=$(find dist -type f -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)
          echo "hash=$hash" >> $GITHUB_OUTPUT
          echo "📋 Build integrity hash: $hash"
      - name: Security scan of build output
        run: |
          echo "🔍 Scanning build output for sensitive data..."
          if grep -r "api[_-]key\|secret\|password" dist/ --exclude="*.map" | grep -v "console\|error\|log"; then
            echo "❌ Potential sensitive data found in build output!"
            exit 1
          fi
          echo "✅ Build output security scan passed"
      - uses: actions/upload-pages-artifact@v3
        with: { path: dist }

  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    environment: 
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: Verify deployment
        run: |
          echo "🚀 Deployment completed successfully!"
          echo "🌐 Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "📋 Build hash: ${{ needs.build.outputs.build-hash }}"
          
          # Basic health check
          echo "🔍 Performing deployment health check..."
          if curl -f -s "${{ steps.deployment.outputs.page_url }}" > /dev/null; then
            echo "✅ Health check passed - site is accessible"
          else
            echo "❌ Health check failed - site may not be accessible"
            exit 1
          fi
