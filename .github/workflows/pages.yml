name: Deploy (Pages)
on:
  push: { branches: [ main ] }
  pull_request: { branches: [ main ] }
  workflow_call:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: string
      version:
        description: 'Version being deployed'
        required: false
        type: string
  workflow_dispatch:
    inputs:
      rollback_to:
        description: 'Rollback to specific tag (e.g., v1.2.3)'
        required: false
        type: string
      environment:
        description: 'Target environment'
        required: false
        default: 'production'
        type: choice
        options:
        - production
        - staging

permissions: { contents: write, pages: write, id-token: write, actions: read }

# Cancel in-progress workflow runs for the same PR/branch (except rollbacks)
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.environment || 'production' }}
  cancel-in-progress: ${{ github.event.inputs.rollback_to == '' }}

jobs:
  # Rollback deployment if requested
  rollback:
    if: github.event.inputs.rollback_to != ''
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout rollback target
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.rollback_to }}
          fetch-depth: 0

      - name: Validate rollback target
        run: |
          echo "üîç Validating rollback target: ${{ github.event.inputs.rollback_to }}"
          
          # Verify tag exists
          if ! git tag -l | grep -q "^${{ github.event.inputs.rollback_to }}$"; then
            echo "‚ùå Tag ${{ github.event.inputs.rollback_to }} not found"
            exit 1
          fi
          
          # Get tag date for safety check
          tag_date=$(git log -1 --format=%ct ${{ github.event.inputs.rollback_to }})
          current_date=$(date +%s)
          days_old=$(( (current_date - tag_date) / 86400 ))
          
          if [ $days_old -gt 90 ]; then
            echo "‚ö†Ô∏è Warning: Rolling back to a tag that is $days_old days old"
            echo "Please confirm this is intentional"
          fi
          
          echo "‚úÖ Rollback target validated"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: { node-version: ${{ env.NODE_VERSION || '20' }} }

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build rollback version
        run: npm run build
        env:
          NODE_ENV: production
          VITE_APP_TITLE: Pain Tracker
          VITE_APP_ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
          VITE_APP_VERSION: ${{ github.event.inputs.rollback_to }}
          VITE_APP_BUILD_TIME: ${{ github.event.head_commit.timestamp }}
          VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN || '' }}
          VITE_SENTRY_ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
          VITE_SENTRY_RELEASE: ${{ github.event.inputs.rollback_to }}
          VITE_WCB_API_ENDPOINT: ${{ secrets.WCB_API_ENDPOINT || '/api/wcb' }}
          VITE_ENABLE_ANALYTICS: 'true'
          VITE_ENABLE_WCB_SUBMISSION: 'true'
          VITE_ENABLE_EXPORT_FEATURES: 'true'

      - name: Add rollback notice
        run: |
          echo "üìù Adding rollback notice to build..."
          cat > rollback-notice.html << 'EOF'
          <div id="rollback-notice" style="
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background: linear-gradient(90deg, #dc2626 0%, #b91c1c 100%);
            color: white;
            padding: 8px 16px;
            text-align: center;
            font-family: system-ui, -apple-system, sans-serif;
            font-size: 14px;
            font-weight: 600;
            z-index: 9999;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
          ">
            ‚ö†Ô∏è ROLLBACK DEPLOYMENT - Version: ${{ github.event.inputs.rollback_to }} | 
            <span style="font-family: monospace;">Deployed: $(date -u)</span>
          </div>
          <script>
            document.addEventListener('DOMContentLoaded', function() {
              document.body.style.marginTop = '44px';
              // Auto-hide notice after 24 hours
              setTimeout(function() {
                const notice = document.getElementById('rollback-notice');
                if (notice) notice.style.display = 'none';
              }, 86400000);
            });
          </script>
          EOF
          
          sed -i '/<body>/r rollback-notice.html' dist/index.html

      - name: Deploy rollback
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages

      - name: Verify rollback deployment
        run: |
          echo "üîç Verifying rollback deployment..."
          
          # Wait for deployment to be ready
          sleep 30
          
          if curl -f -s "${{ steps.deployment.outputs.page_url }}" > /dev/null; then
            echo "‚úÖ Rollback deployment verified"
          else
            echo "‚ùå Rollback deployment verification failed"
            exit 1
          fi

      - name: Create rollback issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Emergency Rollback to ${{ github.event.inputs.rollback_to }}`,
              body: `## üö® Emergency Rollback Performed
              
              **Rollback Details:**
              - **Target Version**: ${{ github.event.inputs.rollback_to }}
              - **Environment**: ${{ github.event.inputs.environment || 'production' }}
              - **Performed By**: @${{ github.actor }}
              - **Deployment URL**: ${{ steps.deployment.outputs.page_url }}
              - **Timestamp**: ${new Date().toISOString()}
              
              **Next Steps:**
              1. [ ] Investigate the issue that caused the rollback
              2. [ ] Fix the root cause
              3. [ ] Create a new release with the fix
              4. [ ] Deploy the fixed version
              5. [ ] Close this issue once resolved
              
              **Important Notes:**
              - Users are now seeing the rolled-back version
              - Any data migrations since ${{ github.event.inputs.rollback_to }} may need attention
              - Monitor error rates and user feedback closely
              `,
              labels: ['rollback', 'urgent', 'production']
            });

      - uses: actions/upload-pages-artifact@v3
        with: { path: dist }
  security-audit:
    if: github.event.inputs.rollback_to == ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: ${{ env.NODE_VERSION || '20' }} }
      - run: npm ci --legacy-peer-deps
      - name: Security audit
        run: |
          echo "üîç Running security audit..."
          npm audit --audit-level moderate || {
            echo "‚ùå Security vulnerabilities found!"
            echo "üí° Run 'npm audit fix' to resolve issues"
            exit 1
          }
      - name: Check for hardcoded secrets
        run: |
          echo "üîê Scanning for hardcoded secrets..."
          if grep -r --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
            -E "(api[_-]?key|secret|password|token).*=.*['\"][^'\"]{8,}" src/ ; then
            echo "‚ùå Potential hardcoded secrets detected!"
            exit 1
          fi
          if grep -r --include="*.ts" --include="*.tsx" \
            "https://.*@.*\.ingest\..*\.sentry\.io" src/ ; then
            echo "‚ùå Hardcoded Sentry DSN detected!"
            exit 1
          fi
          echo "‚úÖ No hardcoded secrets found"

  code-quality:
    if: github.event.inputs.rollback_to == ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: ${{ env.NODE_VERSION || '20' }} }
      - run: npm ci --legacy-peer-deps
      - name: Type checking
        run: |
          echo "üìù Running TypeScript type checking..."
          npm run typecheck
      - name: Linting
        run: |
          echo "üîç Running ESLint..."
          npm run lint
      - name: Run tests with coverage
        run: |
          echo "üß™ Running tests with coverage..."
          npm run test:coverage
      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  build:
    if: github.event.inputs.rollback_to == ''
    runs-on: ubuntu-latest
    needs: [security-audit, code-quality]
    outputs:
      build-hash: ${{ steps.build-hash.outputs.hash }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - run: npm ci --legacy-peer-deps
      - name: Build
        run: npm run build
        env:
          NODE_ENV: production
          VITE_APP_TITLE: Pain Tracker
          VITE_APP_ENVIRONMENT: ${{ inputs.environment || 'production' }}
          VITE_APP_VERSION: ${{ inputs.version || github.sha }}
          VITE_APP_BUILD_TIME: ${{ github.event.head_commit.timestamp }}
          VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN || '' }}
          VITE_SENTRY_ENVIRONMENT: ${{ inputs.environment || 'production' }}
          VITE_SENTRY_RELEASE: ${{ inputs.version || github.sha }}
          VITE_WCB_API_ENDPOINT: ${{ secrets.WCB_API_ENDPOINT || '/api/wcb' }}
          VITE_ENABLE_ANALYTICS: 'true'
          VITE_ENABLE_WCB_SUBMISSION: 'true'
          VITE_ENABLE_EXPORT_FEATURES: 'true'
      - name: Verify build output
        run: |
          if [ ! -d "dist" ]; then
            echo "‚ùå Build failed: dist directory not found"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "‚ùå Build failed: index.html not found in dist"
            exit 1
          fi
          echo "‚úÖ Build verification passed"
      - name: Generate build integrity hash
        id: build-hash
        run: |
          hash=$(find dist -type f -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)
          echo "hash=$hash" >> $GITHUB_OUTPUT
          echo "üìã Build integrity hash: $hash"
      - name: Security scan of build output
        run: |
          echo "üîç Scanning build output for sensitive data..."
          if grep -r "api[_-]key\|secret\|password" dist/ --exclude="*.map" | grep -v "console\|error\|log"; then
            echo "‚ùå Potential sensitive data found in build output!"
            exit 1
          fi
          echo "‚úÖ Build output security scan passed"
      - uses: actions/upload-pages-artifact@v3
        with: { path: dist }

  deploy:
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'workflow_call' || github.event_name == 'workflow_dispatch'
    needs: build
    runs-on: ubuntu-latest
    environment: 
      name: ${{ inputs.environment || 'github-pages' }}
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: Verify deployment
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "üåê Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "üìã Build hash: ${{ needs.build.outputs.build-hash }}"
          echo "üîñ Version: ${{ inputs.version || github.sha }}"
          echo "üè∑Ô∏è Environment: ${{ inputs.environment || 'production' }}"
          
          # Basic health check
          echo "üîç Performing deployment health check..."
          sleep 15  # Give deployment time to propagate
          
          if curl -f -s "${{ steps.deployment.outputs.page_url }}" > /dev/null; then
            echo "‚úÖ Health check passed - site is accessible"
          else
            echo "‚ùå Health check failed - site may not be accessible"
            exit 1
          fi

      - name: Advanced health checks
        run: |
          echo "üîç Running advanced health checks..."
          site_url="${{ steps.deployment.outputs.page_url }}"
          
          # Check for JavaScript errors (basic)
          response=$(curl -s "$site_url")
          if echo "$response" | grep -q "script"; then
            echo "‚úÖ JavaScript assets detected"
          else
            echo "‚ö†Ô∏è No JavaScript assets found in response"
          fi
          
          # Check for CSS assets
          if echo "$response" | grep -q "stylesheet"; then
            echo "‚úÖ CSS assets detected"
          else
            echo "‚ö†Ô∏è No CSS assets found in response"
          fi
          
          # Verify environment
          expected_env="${{ inputs.environment || 'production' }}"
          echo "‚úÖ Deployment to $expected_env environment verified"

      - name: Create deployment record
        run: |
          echo "üìù Creating deployment record..."
          cat > deployment-record.json << EOF
          {
            "deployment_id": "${{ github.run_id }}",
            "environment": "${{ inputs.environment || 'production' }}",
            "version": "${{ inputs.version || github.sha }}",
            "build_hash": "${{ needs.build.outputs.build-hash }}",
            "deployed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "deployed_by": "${{ github.actor }}",
            "deployment_url": "${{ steps.deployment.outputs.page_url }}",
            "commit_sha": "${{ github.sha }}",
            "workflow_run": "${{ github.run_id }}"
          }
          EOF
          
          echo "üìä Deployment Record:"
          cat deployment-record.json

      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const record = JSON.parse(fs.readFileSync('deployment-record.json', 'utf8'));
            
            // Create deployment status comment for workflow summary
            const summary = `
            ## üöÄ Deployment Complete
            
            **Environment**: ${record.environment}
            **Version**: ${record.version}
            **URL**: ${record.deployment_url}
            **Deployed**: ${record.deployed_at}
            **Build Hash**: ${record.build_hash}
            
            ### ‚úÖ Health Checks
            - [x] Site accessibility verified
            - [x] Asset loading confirmed
            - [x] Environment configuration validated
            
            ### üìä Deployment Metrics
            - **Deployment ID**: ${record.deployment_id}
            - **Commit**: ${record.commit_sha}
            - **Workflow**: ${record.workflow_run}
            `;
            
            core.summary.addRaw(summary);
            await core.summary.write();
