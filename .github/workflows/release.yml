name: Release Management

on:
  workflow_dispatch:
    inputs:
      run_release:
        description: 'Trigger a release flow (true/false)'
        required: true
        default: 'true'

permissions:
  contents: write
  pages: write

jobs:
  check-release:
    name: Check Release Conditions
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.conventional.outputs.should-release }}
      release-type: ${{ steps.conventional.outputs.release-type }}
      current-version: ${{ steps.version.outputs.current }}
      next-version: ${{ steps.check.outputs.next }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get current package version
        id: version
        run: |
          current=$(node -p "require('./package.json').version")
          echo "current=$current" >> $GITHUB_OUTPUT

      - name: Analyze commits (conventional-recommended-bump)
        id: conventional
        run: |
          # Install recommended-bump and run it to determine release type
          npm install --no-save conventional-recommended-bump
          node -e "const recommended=require('conventional-recommended-bump'); recommended({preset:'angular'}, (err, result)=>{ if(err){console.error(err); process.exit(1);} const t=result && result.releaseType ? result.releaseType : 'none'; console.log(t); process.exit(0); })" > .bump_type || true
          TYPE=$(cat .bump_type | tr -d '\n')
          if [ "$TYPE" = "none" ] || [ -z "$TYPE" ]; then
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "release-type=none" >> $GITHUB_OUTPUT
          else
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "release-type=$TYPE" >> $GITHUB_OUTPUT
          fi

      - name: Determine release (semver-aware)
        id: check
        env:
          RELEASE_TYPE: ${{ steps.conventional.outputs.release-type }}
          SHOULD_RELEASE: ${{ steps.conventional.outputs.should-release }}
        run: |
          if [ "${SHOULD_RELEASE}" != "true" ]; then
            echo "should-release=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          node - <<'NODE'
          const fs = require('fs');
          const pkg = JSON.parse(fs.readFileSync('package.json'));
          const current = pkg.version;
          const releaseType = process.env.RELEASE_TYPE || 'patch';

          function bumpSemver(v, type) {
            const m = v.match(/^(\d+)\.(\d+)\.(\d+)(?:-(.+))?$/);
            if (!m) throw new Error('Invalid semver: ' + v);
            let major = parseInt(m[1], 10);
            let minor = parseInt(m[2], 10);
            let patch = parseInt(m[3], 10);
            const prerelease = m[4];

            if (type === 'major') { major += 1; minor = 0; patch = 0; return `${major}.${minor}.${patch}`; }
            if (type === 'minor') { minor += 1; patch = 0; return `${major}.${minor}.${patch}`; }
            if (type === 'patch') { patch += 1; return `${major}.${minor}.${patch}`; }

            if (type.startsWith('prerelease')) {
              if (!prerelease) return `${major}.${minor}.${patch}-rc.1`;
              const prMatch = prerelease.match(/^(.*?)(?:\.(\d+))?$/);
              if (prMatch && prMatch[2]) {
                const n = parseInt(prMatch[2], 10) + 1;
                return `${major}.${minor}.${patch}-${prMatch[1]}.${n}`;
              }
              return `${major}.${minor}.${patch}-${prerelease}.1`;
            }

            throw new Error('Unsupported release type: ' + type);
          }

          const next = bumpSemver(current, releaseType);
          const out = process.env.GITHUB_OUTPUT;
          if (!out) throw new Error('GITHUB_OUTPUT not defined');
          fs.appendFileSync(out, `next=${next}\n`);
          NODE

  create-release:
    name: Create Release (placeholder)
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.should-release == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show release info
        run: |
          echo "Current version: ${{ needs.check-release.outputs.current-version }}"
          echo "Next version: ${{ needs.check-release.outputs.next-version }}"
          echo "Release type: ${{ needs.check-release.outputs.release-type }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ needs.check-release.outputs.next-version }}
          release_name: Release ${{ needs.check-release.outputs.next-version }}
          body: "Automated release (type: ${{ needs.check-release.outputs.release-type }})"
          draft: false
          prerelease: false