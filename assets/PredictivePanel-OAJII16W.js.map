{"version":3,"file":"PredictivePanel-OAJII16W.js","sources":["../../src/components/TrendChart.tsx","../../src/components/PredictivePanel.tsx"],"sourcesContent":["import React from 'react';\r\nimport Chart from '../design-system/components/Chart';\r\nimport { chartColors, getChartColorAlpha } from '../design-system/utils/chart-colors';\r\n\r\nexport default function TrendChart({ labels, data, height = 160 }: { labels: string[]; data: number[]; height?: number }) {\r\n  return (\r\n    <div>\r\n      <Chart\r\n        data={{\r\n          labels,\r\n          datasets: [{ label: 'Pain level', data, borderColor: chartColors.analytics.trend, backgroundColor: getChartColorAlpha(0, 0.2, 'analytics'), fill: true }]\r\n        }}\r\n        type=\"line\"\r\n        height={height}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n// Mock implementations for predictive services\r\nconst predictFlareUp = (entries: PainEntry[]) => {\r\n  if (!entries || entries.length === 0) return { score: 0, reason: 'No data available' };\r\n  const recent = entries.slice(-7);\r\n  const avg = recent.reduce((sum, e) => sum + e.baselineData.pain, 0) / recent.length;\r\n  const score = Math.min(1, avg / 10);\r\n  return { score, reason: score > 0.5 ? 'Elevated pain levels detected' : 'Normal pain levels' };\r\n};\r\n\r\nconst suggestCopingStrategies = (score: number) => {\r\n  if (score > 0.7) return ['Rest and consult healthcare provider', 'Use pain management techniques'];\r\n  if (score > 0.4) return ['Monitor symptoms closely', 'Consider preventive measures'];\r\n  return ['Maintain healthy habits', 'Continue regular monitoring'];\r\n};\r\n\r\nconst riskTrendOverDays = (entries: PainEntry[], days: number) => {\r\n  return Array.from({ length: days }, (_, i) => ({\r\n    label: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toLocaleDateString(),\r\n    score: Math.floor(Math.random() * 100)\r\n  }));\r\n};\r\n\r\nconst analyzeTriggers = (entries: PainEntry[], days: number) => {\r\n  // Mock trigger analysis\r\n  return [\r\n    { name: 'Weather changes', confidence: 75, detail: 'Cold weather correlation' },\r\n    { name: 'Sleep quality', confidence: 60, detail: 'Poor sleep patterns' }\r\n  ];\r\n};\r\n\r\n// import { predictFlareUp, suggestCopingStrategies, riskTrendOverDays } from '@pain-tracker/services/predictions';\r\n// import { analyzeTriggers } from '@pain-tracker/services/triggerAnalysis';\r\nimport { Card, CardHeader, CardTitle, CardContent } from '../design-system/components/Card';\r\nimport type { PainEntry } from '../types';\r\nimport TrendChart from './TrendChart';\r\n\r\nexport default function PredictivePanel({ entries }: { entries: PainEntry[] }) {\r\n  const { score, reason } = predictFlareUp(entries);\r\n  const strategies = suggestCopingStrategies(score);\r\n  const trend = riskTrendOverDays(entries, 7);\r\n  const triggers = analyzeTriggers(entries, 30).slice(0,2);\r\n\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <Card className=\"relative\">\r\n        <CardHeader>\r\n          <CardTitle>Predicted Flare-up Risk</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"mb-3\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <div className=\"text-lg font-semibold\">Risk: {(score*100).toFixed(0)}%</div>\r\n                <div className=\"text-sm text-muted-foreground\">{reason}</div>\r\n              </div>\r\n              <div style={{ width: 200 }}>\r\n                <div className=\"h-3 bg-muted rounded overflow-hidden\">\r\n                  <div\r\n                    className={`h-3 rounded`}\r\n                    style={{ width: `${Math.round(score*100)}%`, background: score < 0.4 ? 'linear-gradient(90deg,#34d399,#10b981)' : score < 0.7 ? 'linear-gradient(90deg,#f59e0b,#f97316)' : 'linear-gradient(90deg,#fb7185,#ef4444)' }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"mt-3\">\r\n              <TrendChart labels={trend.map(t => t.label)} data={trend.map(t => t.score)} height={80} />\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            {triggers.length > 0 && (\r\n              <div className=\"mb-3\">\r\n                <div className=\"text-sm font-medium\">Top triggers</div>\r\n                <ul className=\"mt-1 list-disc list-inside text-sm text-muted-foreground\">\r\n                  {triggers.map(t => (\r\n                    <li key={t.name}>{t.name} â€” {t.confidence}% ({t.detail})</li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"text-sm font-medium mb-2\">Suggested actions</div>\r\n            <ul className=\"mt-1 list-disc list-inside text-sm space-y-1\">\r\n              {strategies.map(s => (\r\n                <li key={s} className=\"text-muted-foreground\">{s}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["TrendChart","labels","data","height","jsx","Chart","chartColors","getChartColorAlpha","predictFlareUp","entries","recent","avg","sum","e","score","suggestCopingStrategies","riskTrendOverDays","days","_","i","analyzeTriggers","PredictivePanel","reason","strategies","trend","triggers","jsxs","Card","CardHeader","CardTitle","CardContent","t","s"],"mappings":"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"}